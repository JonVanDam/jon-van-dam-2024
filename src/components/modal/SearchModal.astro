---
import { Icon } from 'astro-icon/components';
import { deslugify } from '../../util/util';

const { projectId } = Astro.props;

const getAllArticles = await Astro.glob('../../pages/*/*/*.md');

const articles = getAllArticles
  .filter((article) => {
    return article.url?.includes(projectId);
  })
  .map((article) => {
    return {
      title: article.frontmatter.title,
      url: article.url,
      content: article.rawContent(),
    };
  });
---

<modal id="search-modal" class="search-modal hidden">
  <div class="search-modal-content">
    <div class="p-2 w-full relative">
      <input autofocus id="search-input" class="search-input" placeholder={'Search ' + deslugify(projectId) + '...'} />
      <Icon name="basil:search-outline" class="absolute top-5 left-5 scale-125 pointer-events-none" />
    </div>
    <div class="px-2">
      <ul class="max-h-[400px] overflow-y-auto border-t border-primary" id="results-list"></ul>
    </div>
  </div>
</modal>

<script is:inline define:vars={{ articles }}>
  // Define HTML elements in JS
  const input = document.getElementById('search-input');

  const resultsList = document.getElementById('results-list');

  const modal = document.getElementById('search-modal');

  // Some helper functions

  // Define a debounce function

  const debounce = (callback, wait) => {
    let timeoutId = null;
    return (...args) => {
      window.clearTimeout(timeoutId);
      timeoutId = window.setTimeout(() => {
        callback(...args);
      }, wait);
    };
  };

  // Get extended substring from article, around the match with the search input value
  const getExtendedMatch = (content, inputValue) => {
    // First determine match index and length
    const matchIndex = content.toLowerCase().indexOf(inputValue.toLowerCase());
    const matchLength = inputValue.length;

    // Find the substrings before and after the match + the match itself separately for styling
    const preMatch = content.slice(matchIndex - 40, matchIndex);
    const match = content.slice(matchIndex, matchIndex + matchLength);
    const postMatch = content.slice(matchIndex + matchLength, matchIndex + matchLength + 40);

    const extendedMatch = `
            <span>...${preMatch}</span>
            <span class="font-bold">${match}</span>
            <span>${postMatch}...</span>
          `;
    return extendedMatch;
  };

  // Find the nearest header before the match
  const getNearestHeaderForMatch = (content, inputValue, url) => {
    const matchIndex = content.toLowerCase().indexOf(inputValue.toLowerCase());

    // First split the article content (up until the match) on every line break
    const splittedArticleOnLineBreaks = content.slice(0, matchIndex).split(`\n`);
    // Filter out the headers -> where the line starts with ##
    const headers = splittedArticleOnLineBreaks?.filter((string) => string.includes('##')) || [];
    // The last header is the header directly before our match
    const nearestHeaderToMatch = headers.length ? headers[headers.length - 1] : null;

    if (!nearestHeaderToMatch) {
      return null;
    }
    // Perform some string operations to add a slug for this header to the article url
    const trimmedHeader = nearestHeaderToMatch.slice(nearestHeaderToMatch.indexOf(' ') + 1);
    const urlWithHeader = url + '#' + trimmedHeader.replace(/\s+/g, '-').toLowerCase();
    return urlWithHeader;
  };

  // Actual onChange event -> filter articles based on search-input string value

  const onInputChange = (evt) => {
    let inputValue = evt.target.value;

    if (inputValue === '') {
      resultsList.innerHTML = ``;
      return;
    }

    const filteredArticles = articles
      .filter((article) => {
        return (
          article.title.toLowerCase().includes(inputValue.toLowerCase()) ||
          article.content.toLowerCase().includes(inputValue.toLowerCase())
        );
      })
      .map((article) => {
        // Add extra properties to the article to display in the search-results
        // -> only if we have a content match, not if we have a title match

        if (article.content.toLowerCase().includes(inputValue.toLowerCase())) {
          const extendedMatch = getExtendedMatch(article.content, inputValue);
          const urlWithHeader = getNearestHeaderForMatch(article.content, inputValue, article.url);

          return {
            ...article,
            match: extendedMatch ? extendedMatch : null,
            url: urlWithHeader ? urlWithHeader : article.url,
          };
        } else {
          return article;
        }
      });

    resultsList.innerHTML = '';

    if (filteredArticles.length > 0) {
      filteredArticles.forEach((article) => {
        resultsList.insertAdjacentHTML(
          'beforeend',
          `
          <li class="py-2 px-1">
            <a href="${article.url}">
              <div>${article.title}</div>
              ${article.match ? `<div class="text-sm text-tertiary">${article.match}</div>` : ``}
            </a>
          </li>
          `,
        );
      });
    } else {
      resultsList.insertAdjacentHTML('beforeend', `<p class="py-4 text-center text-secondary">No results</p>`);
    }
  };

  // Add debounced function to input-element

  input.addEventListener('input', debounce(onInputChange, 350));

  // Close modal helper function

  const closeModal = () => {
    input.value = '';
    resultsList.innerHTML = '';
    modal.classList.add('hidden');
  };

  // Register click outside of modal, close-button or ESC key -> close modal

  window.addEventListener('click', (evt) => {
    const target = evt.target;

    if (target == modal) {
      closeModal();
    }
  });

  window.addEventListener('keydown', (evt) => {
    if (evt.code === 'Escape') {
      closeModal();
    }
  });
</script>
