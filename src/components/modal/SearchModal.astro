---
import { Icon } from 'astro-icon/components';
import { deslugify } from '../../util/util';

const { projectId } = Astro.props;

const getAllArticles = await Astro.glob('../../pages/*/*/*.md');

const articles = getAllArticles
  .filter((article) => {
    return article.url?.includes(projectId);
  })
  .map((article) => {
    return {
      title: article.frontmatter.title,
      url: article.url,
      content: article.rawContent(),
    };
  });
---

<modal id="search-modal" class="search-modal hidden">
  <div class="search-modal-content">
    <div class="p-2 w-full relative">
      <input autofocus id="search-input" class="search-input" placeholder={'Search ' + deslugify(projectId) + '...'} />
      <Icon name="basil:search-outline" class="absolute top-5 left-5 scale-125 pointer-events-none" />
    </div>
    <div class="px-2">
      <ul class="max-h-[400px] overflow-y-auto border-t border-primary" id="results-list"></ul>
    </div>
  </div>
</modal>

<script is:inline define:vars={{ articles }}>
  // Define HTML elements in JS
  const input = document.getElementById('search-input');

  const resultsList = document.getElementById('results-list');

  const modal = document.getElementById('search-modal');

  // Define a debounce function

  const debounce = (callback, wait) => {
    let timeoutId = null;
    return (...args) => {
      window.clearTimeout(timeoutId);
      timeoutId = window.setTimeout(() => {
        callback(...args);
      }, wait);
    };
  };

  // Actual onChange event -> filter articles based on search-input string value

  const onInputChange = (evt) => {
    let inputValue = evt.target.value;

    if (inputValue === '') {
      resultsList.innerHTML = ``;
      return;
    }

    const filteredArticles = articles
      .filter((article) => {
        return (
          article.title.toLowerCase().includes(inputValue.toLowerCase()) ||
          article.content.toLowerCase().includes(inputValue.toLowerCase())
        );
      })
      .map((article) => {
        let extendedMatch = '';
        if (article.content.toLowerCase().includes(inputValue.toLowerCase())) {
          const match = article.content.toLowerCase().indexOf(inputValue.toLowerCase());
          extendedMatch = article.content.slice(match - 40 || 0, match + 40);
        } else {
          extendedMatch = '';
        }
        return {
          ...article,
          match: extendedMatch ? '...' + extendedMatch + '...' : '',
        };
      });

    resultsList.innerHTML = '';

    if (filteredArticles.length > 0) {
      filteredArticles.forEach((article) => {
        resultsList.insertAdjacentHTML(
          'beforeend',
          `
          <li class="py-2 px-1">
            <a href="${article.url}">
              <div>${article.title}</div>
              <div class="text-sm text-tertiary">${article.match}</div>
            </a>
          </li>
          `,
        );
      });
    } else {
      resultsList.insertAdjacentHTML('beforeend', `<p class="py-4 text-center text-secondary">No results</p>`);
    }
  };

  // Add debounced function to input-element

  input.addEventListener('input', debounce(onInputChange, 350));

  // Close modal helper function

  const closeModal = () => {
    input.value = '';
    resultsList.innerHTML = '';
    modal.classList.add('hidden');
  };

  // Register click outside of modal, close-button or ESC key -> close modal

  window.addEventListener('click', (evt) => {
    const target = evt.target;

    if (target == modal) {
      closeModal();
    }
  });

  window.addEventListener('keydown', (evt) => {
    if (evt.code === 'Escape') {
      closeModal();
    }
  });
</script>
